import pygame
import random
import time

#Initialize pygame and all its modules
pygame.init()

#screen setup
width = 800                       # Width of the game window
height = 600                      # Height of the game window
screen = pygame.display.set_mode((width, height))
pygame.display.set_caption("Helicopter Game") # Set window title

#Define color constants
BLACK = (0, 0, 0)                 # background color
GREEN = (0, 255, 0)               # Color for terrain and obstacles
WHITE = (255, 255, 255)           # Color for helicopter and score text

#Helicopter setup (player character)
heli_width = 30                   # Width of the helicopter
heli_height = 30                  # Height of the helicopter
heli_x = 100                      # Horizontal position stays constant
heli_y = height // 2             # Start vertically in the center
segments = 50
segment_width = width // segments




#initialize top and bottom terrain segments with random values
top_terrain = []
bottom_terrain = []
for i in range(segments):
    top_terrain.append(random.randint(50, 150))                    # Top terrain height
    bottom_terrain.append(height - random.randint(100, 200))       # Bottom terrain height
    
terrain_offset = 0                # Tracks horizontal scrolling of terrain

# Obstacle class to store obstacle properties cleanly
class Obstacle:
    def __init__(self, x, y, w, h):
        self.x = x               # Left position of obstacle
        self.y = y               # Top position of obstacle
        self.w = w               # Width of obstacle
        self.h = h               # Height of obstacle
        
# obstacles setup
obstacles = []                    # List to store all obstacles
obstacle_timer = 0                # Frame counter to time obstacle generation
obstacle_delay = 90               # Delay (in frames) between obstacle spawns

# Game control variables
gravity = 4                       # Downward pull on the helicopter
lift = -6                         #upward motion when mouse is pressed
speed = 5                         # Speed of terrain/obstacle scroolling
score = 0                         # Player score (increases over time)
running = True                    # Controls whether the game loop is running
clock = pygame.time.Clock()       # Regulates game framerate
font = pygame.font.SysFont(None, 24)  # Font used to draw score

# Main game loop
while running:
    clock.tick(30)                # Run at 30 frames per second
    
    # Handle quitting the game
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
            
    # Read mouse input
    mouse = pygame.mouse.get_pressed()
    mouse_pressed = mouse[0]     #true if left ,ouse button is helf
    
    # Apply gravity or lift to the helicopter
    if mouse_pressed:
        heli_y += lift           # Move up
    else:
        heli_y += gravity        # Move down
        
    # Scroll terrain to the left by increasing offset
    terrain_offset += speed
    if terrain_offset >= segment_width:
        terrain_offset = 0                                        
        top_terrain.append(random.randint(50, 150))                 # Add new terrain segment
        top_terrain.pop(0)                                          # Remove oldest segment
        bottom_terrain.append(height - random.randint(100, 200))   # seme for bottom
        bottom_terrain.pop(0)
        
    # Gwnwerate a new obstacle every few frames
    obstacle_timer += 1
    if obstacle_timer > obstacle_delay:
       obstacle_timer = 0
       obstacle_y = random.randint(150, height - 200)
       new_obstacle = Obstacle(width, obstacle_y, 30, 100)          # Fixed size obstacles
       obstacles.append(new_obstacle)
       
       # Move each obstacle left and keeponly those still on screen
       new_list = []
       for obs in obstacles:
           obs.x -= speed
           if obs.x + obs.w > 0:
               new_list.append(obs)
       obstacles = new_list
       
       #Calculate helicopter boundaries
       heli_top = heli_y
       heli_bottom = heli_y + heli_height
       heli_left = heli_x
       heli_right = heli_x + heli_width
       
       # Terrain collision detection using current terrain segment
       col_x = (heli_left + terrain_offset) // segment_width
       sol_x = min(col_x, len(top_terrain) - 1) # Clamp index to avoid out-of-bounds
       
       # Check collision with top or bottom terrain
       if heli_top < top_terrain[col_x] or heli_bottom > bottom_terrain[col_x]:
           running = False
           
    # Check collision with each obstacle
    for obs in obstacles:
        if (heli_right > obs.x and heli_left < obs.w and
            heli_bottom > obs.y and heli_top < obs.y + obs.h):
            running = False
            
        # Clear screen to black before redrawing
        screen.fill(BLACK)
        
        # Draw terrain segments
        for i in range(segments):
            x = i * segment_width - terrain_offset
            pygame.draw.rect(screen, GREEN, (x, 0, segment_width, top_terrain[i]))
            pygame.draw.rect(screen, GREEN, (x, bottom_terrain[i], segment_width, height - bottom_terrain[i]))
            
        # Draw all current obstacles
        for obs in obstacles:
            pygame.draw.rect(screen, GREEN, (obs.x, obs.y, obs.w, obs.h))
            
        # Draw the helicopter
        pygame.draw.rect(screen, WHITE, (heli_x, heli_y, heli_width, heli_height))
        
        #Update and draw score on the screen
        score += 1
        text = font.render("Score: " + str(score), True, WHITE)
        screen.blit(text, (10, 10))
        
        # Show update screen\
        pygame.display.flip()
        
# Pause 3 seconds after crash before quitting
pygame.time.delay(300)
pygame.quit()
print("Game Over! Your score:", score)
